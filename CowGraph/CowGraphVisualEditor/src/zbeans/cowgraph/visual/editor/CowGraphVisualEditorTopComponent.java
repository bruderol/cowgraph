/*
 * Copyright (C) 2011 rbr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package zbeans.cowgraph.visual.editor;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComponent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import zbeans.cowgraph.model.CowGraphVersion;
import zbeans.cowgraph.visual.editor.palette.PaletteSupport;
import static zbeans.cowgraph.visual.editor.Bundle.*;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//zbeans.cowgraph.visual.editor//CowGraphVisualEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "CowGraphVisualEditorTopComponent",
iconBase = "/zbeans/cowgraph/visual/editor/new_icon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "zbeans.cowgraph.visual.editor.CowGraphVisualEditorTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window", position = 0)})
@TopComponent.OpenActionRegistration(displayName = "#CTL_CowGraphVisualEditorAction")
public final class CowGraphVisualEditorTopComponent extends TopComponent implements ActionListener, ChangeListener {

    private final JComponent view;
    private static CowGraphVersion version = new CowGraphVersion();
    private static int i = 1;

    @Messages({"UnsavedImageNameFormat=Image {0}"})
    public CowGraphVisualEditorTopComponent() {
        initComponents();
        setDisplayName(UnsavedImageNameFormat(i++));
        //setToolTipText(NbBundle.getMessage(CowGraphVisualEditorTopComponent.class, "HINT_CowGraphVisualEditorTopComponent"));

        //TODO: Should be passed into Editor
//        version = new CowGraphVersion();

        CowGraphVisualEditorScene scene = new CowGraphVisualEditorScene(version);
        view = scene.createView();

        canvasScrollPane.setViewportView(view);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        associateLookup(Lookups.fixed(PaletteSupport.createPalette()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasScrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(canvasScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane canvasScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
